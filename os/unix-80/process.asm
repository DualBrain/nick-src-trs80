;Process/asm: Process Enqueue & Dequeue file.
; Date: 19-Jul-84.
;
; Currently for newdos_80 only.
;
; 'enqueue': Enqueue a new process. Called with HL
;pointing to filename and A=priority.
;
ENQUEUE	CALL	SYS_BUSY
	LD	(ENQ_PRI),A	;save priority
	LD	DE,SYS_BUFFER
	CALL	MOVE_LINE	;HL-->DE
	LD	BC,0120H
	CALL	ALLOC
	JR	NZ,V0_ENQ
	LD	(ENQ_FCB),HL
	LD	BC,20H
	ADD	HL,BC
	LD	(ENQ_BUFFER),HL
	LD	DE,(ENQ_FCB)
	CALL	S_OPEN_EX
	JR	Z,V1_ENQ
V0_ENQ_DOS	OR	80H
V0_ENQ	CALL	ERROR
	CALL	SYS_UNBUSY
	RET
V1_ENQ	CALL	S_READ_SECT
	JR	NZ,V0_ENQ_DOS
	LD	HL,(ENQ_BUFFER)
	CALL	SYS_ASSIGN_PROC
	JR	NZ,V0_ENQ
	LD	(ENQ_PID),A	;process id.
	LD	A,B
	LD	(ENQ_BLOCKS),A	;number of blocks.
	LD	A,H
	CALL	SELECT_MEMORY
	LD	A,H
	OR	80H
	LD	H,A
	LD	L,0
	LD	A,(ENQ_BLOCKS)
	LD	B,A
V2_ENQ	CALL	S_LOAD_DMA
	JR	NZ,V0_ENQ_DOS
	DJNZ	V2_ENQ
	CALL	S_CLOSE
	JR	NZ,V0_ENQ_DOS
	LD	BC,0120H
	CALL	UNALLOC
	JR	NZ,V0_ENQ
	XOR	A
	LD	A,(ENQ_PID)
	CALL	SYS_UNBUSY
	RET
;
;
S_READ_SECT	PUSH	DE
	LD	DE,(ENQ_FCB)
	CALL	DOS_READ_SECT
	POP	DE
	RET
;
S_CLOSE	LD	DE,(ENQ_FCB)
	CALL	DOS_CLOSE
	RET
;
S_OPEN_EX	PUSH	HL
	PUSH	DE
	LD	HL,SYS_BUFFER
	CALL	DOS_EXTRACT
	POP	DE
	POP	HL
	RET	NZ
	LD	B,0
	CALL	DOS_OPEN_EX
	RET
;
S_LOAD_DMA	PUSH	HL
	CALL	S_READ_SECT
	POP	DE
	RET	NZ
	PUSH	BC
	LD	HL,(ENQ_BUFFER)
	LD	BC,0100H
	LDIR
	POP	BC
	EX	DE,HL
	CP	A
	RET
;
;
ASSIGN_PROC	CALL	SYS_BUSY
	CALL	ASSIGN_PID
	JR	Z,V1_ASSIGN
ASSIGN_ERROR	CALL	SYS_UNBUSY
	RET
V1_ASSIGN	LD	(ASS_PID),A
	CALL	ASSIGN_MEM
	JR	NZ,ASSIGN_ERROR
	LD	(ASS_MEM),A
	CALL	ASSIGN_REG
	JR	NZ,ASSIGN_ERROR
	LD	A,(ASS_MEM)
	LD	H,A
	LD	A,(ASS_BLKS)
	LD	B,A
	XOR	A
	LD	A,(ASS_PID)
	CALL	SYS_UNBUSY
	RET
;
ASSIGN_PID	PUSH	HL
	PUSH	BC
	LD	HL,PID_ASSIGNED
	LD	B,MAX_PROCESS
V1_A_P	LD	A,(HL)
	INC	HL
	CP	TRUE
	JR	NZ,V2_A_P
	DJNZ	V1_A_P
	OR	1
	POP	BC
	POP	HL
	RET
V2_A_P	DEC	HL
	LD	(HL),TRUE
	PUSH	BC
	LD	HL,PROC_PRIORITY
	LD	BC,1
	LD	A,(ASS_PID)
	CALL	INDEX
	LD	A,(ENQ_PRI)
	LD	(HL),A
	POP	BC
	LD	A,MAX_PROCESS
	SUB	B
	CP	A
	POP	BC
	POP	HL
	RET
;
ASSIGN_MEM	PUSH	HL
	INC	HL
	XOR	A
	LD	(ASS_REPT),A
	LD	A,(HL)	;# blocks.
	LD	(ASS_BLKS),A
	LD	HL,MEM_ASSIGNED
	LD	C,A	;# blocks.
V1_A_M	LD	A,80H
	SUB	C
	LD	B,A	;max # blocks without overflow.
	LD	D,0
V2_A_M	LD	A,(HL)
	INC	HL
	CP	FALSE
	JR	Z,V3_A_M
	LD	D,0FFH
V3_A_M	INC	D
	LD	A,D
	CP	C
	JR	Z,V4_A_M
	DJNZ	V2_A_M
	LD	A,(ASS_REPT)
	LD	HL,MEM_ASSIGNED+80H
	CP	FALSE
	PUSH	AF
	LD	A,TRUE
	LD	(ASS_REPT),A
	POP	AF
	JR	Z,V1_A_M
	POP	HL
	RET
;
V4_A_M	LD	E,D
	LD	D,0
	OR	A
	SBC	HL,DE
	LD	B,E
V5_A_M	LD	(HL),TRUE
	DJNZ	V5_A_M
	LD	DE,MEM_ASSIGNED
	OR	A
	SBC	HL,DE
	LD	A,L
	CP	A
	POP	HL
	RET
;
; Assign initial register values.
ASSIGN_REG	LD	A,(ASS_PID)
	LD	HL,PROC_REGISTER
	LD	BC,SAVED_REGS*2
	CALL	INDEX
	INC	HL
	INC	HL
	LD	(HL),0
	INC	HL
	LD	A,(ASS_MEM)
	OR	80H
	LD	(HL),A
	LD	BC,7
	ADD	HL,BC
	LD	(HL),0
	INC	HL
	LD	(HL),A
	CP	A
	RET
;
;
; Dequeue a process now.
;
DEQUEUE	LD	HL,PID_ASSIGNED
	LD	BC,1
	CALL	INDEX
	LD	(HL),FALSE
	RET
; Will soon be much much longer.
;
